{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Documents/cxxxxxn.github.io/src/views/NoteDetail/Mnavbar.js\";\nimport React, { Component } from 'react';\nimport './Mnavbar.css';\nexport class MarkdownNavbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.winScroll = () => {\n      if (this.scrollEventLock) return;\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      const newHeadingList = this.getHeadingList().map(h => ({ ...h,\n        distanceToTop: Math.abs(scrollTop + this.props.headingTopOffset - h.offsetTop)\n      }));\n      const distanceList = newHeadingList.map(h => h.distanceToTop);\n      const minDistance = Math.min(...distanceList);\n      const curHeading = newHeadingList.find(h => h.distanceToTop === minDistance);\n      this.setState({\n        currentListNo: curHeading.listNo\n      });\n    };\n\n    this.state = {\n      currentListNo: ''\n    };\n  }\n\n  componentDidMount() {\n    if (this.addTargetTimeout) {\n      clearTimeout(this.addTargetTimeout);\n    }\n\n    this.addTargetTimeout = setTimeout(() => {\n      this.initHeadingsId();\n      document.addEventListener('scroll', this.winScroll, false);\n      window.addEventListener('hashchange', this.winHashChange, false);\n    }, 500);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.source !== this.props.source) {\n      if (this.scrollEventLockTimer) {\n        clearTimeout(this.scrollEventLockTimer);\n      }\n\n      this.scrollEventLock = true;\n      window.scrollTo(0, 0); // window.history.replaceState(\n      //     {},\n      //     '',\n      //     `${window.location.pathname}${window.location.search}`\n      // );\n\n      this.setState({\n        currentListNo: ''\n      });\n      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n      Array.prototype.slice.apply(headings).forEach(h => h.dataset.id = '');\n      this.scrollEventLockTimer = setTimeout(() => {\n        this.initHeadingsId();\n        this.scrollEventLock = false;\n      }, 500);\n    }\n\n    return true;\n  }\n\n  componentWillUnmount() {\n    if (this.addTargetTimeout) {\n      clearTimeout(this.addTargetTimeout);\n    }\n\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    document.removeEventListener('scroll', this.winScroll, false);\n    window.removeEventListener('hashchange', this.winHashChange, false);\n  }\n\n  getNavStructure() {\n    const contentWithoutCode = this.props.source.replace(/^[^#]+\\n/g, '').replace(/^#\\s[^#\\n]*\\n+/, '').replace(/```[^`\\n]*\\n+[^```]+```\\n+/g, '').replace(/`([^`\\n]+)`/g, '$1').replace(/\\*\\*?([^*\\n]+)\\*\\*?/g, '$1').replace(/__?([^_\\n]+)__?/g, '$1').trim();\n    const pattOfTitle = /#+\\s([^#\\n]+)\\n*/g;\n    const matchResult = contentWithoutCode.match(pattOfTitle);\n\n    if (!matchResult) {\n      return [];\n    }\n\n    const navData = matchResult.map((r, i) => ({\n      index: i,\n      level: r.match(/^#+/g)[0].length,\n      text: r.replace(pattOfTitle, '$1')\n    }));\n\n    const levelCount = level => navData.filter(r => r.level === level).length;\n\n    let startLevel = 1;\n    let startLevelCount = levelCount(startLevel);\n\n    while (!startLevelCount) {\n      startLevel += 1;\n      startLevelCount = levelCount(startLevel);\n    }\n\n    let listNo = 1;\n    navData.forEach(t => {\n      if (t.level === startLevel) {\n        t.listNo = listNo.toString();\n        listNo += 1;\n      }\n    });\n    navData.forEach((t, i) => {\n      if (!t.listNo) {\n        if (navData[i - 1] && t.level === navData[i - 1].level + 1) {\n          t.listNo = `${navData[i - 1].listNo}.1`;\n        } else if (navData[i - 1] && t.level === navData[i - 1].level) {\n          t.listNo = navData[i - 1].listNo.replace(/^(.+\\.)(\\d+)$/g, (w, $1, $2) => `${$1}${parseInt($2, 10) + 1}`);\n        } else {\n          t.listNo = '';\n        }\n      }\n    });\n    const result = navData.map(nav => ({ ...nav,\n      listNo: nav.listNo.indexOf('.') < 0 ? `${nav.listNo}.` : nav.listNo,\n      text: nav.text\n    }));\n    return result;\n  }\n\n  scrollToTarget(dataId) {\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    this.scrollTimeout = setTimeout(() => {\n      const target = document.querySelector(`[data-id=\"${dataId}\"]`);\n\n      if (target && typeof target.offsetTop === 'number') {\n        window.scrollTo(0, target.offsetTop - this.props.headingTopOffset);\n      }\n    }, 0);\n  }\n\n  initHeadingsId() {\n    const headingId = decodeURIComponent('');\n    this.getNavStructure().forEach(t => {\n      const headings = document.querySelectorAll(`h${t.level}`);\n      const curHeading = Array.prototype.slice.apply(headings).find(h => h.innerText === t.text && (!h.dataset || !h.dataset.id));\n\n      if (curHeading) {\n        curHeading.dataset.id = `heading-${t.index}`;\n\n        if (headingId && headingId === curHeading.dataset.id) {\n          this.scrollToTarget(headingId);\n          this.setState({\n            currentListNo: t.listNo\n          });\n        }\n      }\n    });\n  }\n\n  getHeadingList() {\n    const headingList = [];\n    this.getNavStructure().forEach(t => {\n      const headings = document.querySelectorAll(`h${t.level}`);\n      const curHeading = Array.prototype.slice.apply(headings).find(h => h.innerText === t.text && !headingList.find(x => x.offsetTop === h.offsetTop));\n\n      if (curHeading) {\n        headingList.push({\n          dataId: `heading-${t.index}`,\n          listNo: t.listNo,\n          offsetTop: curHeading.offsetTop\n        });\n      }\n    });\n    return headingList;\n  }\n\n  render() {\n    const tBlocks = this.getNavStructure().map(t => {\n      const cls = `title-anchor title-level${t.level} ${this.state.currentListNo === t.listNo ? 'active' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cls,\n        onClick: evt => {\n          const currentHash = `heading-${t.index}`; // Avoid execution the callback `onHashChange` when clicking current nav item\n\n          if (t.listNo !== this.state.currentListNo) {\n            // Hash changing callback\n            this.props.onHashChange(currentHash, this.getCurrentHashValue());\n          } // Nav item clicking callback\n\n\n          this.props.onNavItemClick(evt, evt.target, currentHash);\n          this.updateHash(currentHash);\n          this.scrollToTarget(currentHash);\n          this.setState({\n            currentListNo: t.listNo\n          });\n        },\n        key: `title_anchor_${t.index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }\n      }, this.props.ordered ? /*#__PURE__*/React.createElement(\"small\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 39\n        }\n      }, t.listNo) : null, t.text);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `markdown-navigation ${this.props.className}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, tBlocks);\n  }\n\n}\nMarkdownNavbar.defaultProps = {\n  source: '',\n  ordered: false,\n  headingTopOffset: 0,\n  updateHashAuto: true,\n  declarative: false,\n  className: '',\n  onNavItemClick: () => {},\n  onHashChange: () => {}\n};\nexport default MarkdownNavbar;","map":{"version":3,"sources":["/Users/christy/Documents/cxxxxxn.github.io/src/views/NoteDetail/Mnavbar.js"],"names":["React","Component","MarkdownNavbar","constructor","props","winScroll","scrollEventLock","scrollTop","window","pageYOffset","document","documentElement","body","newHeadingList","getHeadingList","map","h","distanceToTop","Math","abs","headingTopOffset","offsetTop","distanceList","minDistance","min","curHeading","find","setState","currentListNo","listNo","state","componentDidMount","addTargetTimeout","clearTimeout","setTimeout","initHeadingsId","addEventListener","winHashChange","shouldComponentUpdate","nextProps","source","scrollEventLockTimer","scrollTo","headings","querySelectorAll","Array","prototype","slice","apply","forEach","dataset","id","componentWillUnmount","scrollTimeout","removeEventListener","getNavStructure","contentWithoutCode","replace","trim","pattOfTitle","matchResult","match","navData","r","i","index","level","length","text","levelCount","filter","startLevel","startLevelCount","t","toString","w","$1","$2","parseInt","result","nav","indexOf","scrollToTarget","dataId","target","querySelector","headingId","decodeURIComponent","innerText","headingList","x","push","render","tBlocks","cls","evt","currentHash","onHashChange","getCurrentHashValue","onNavItemClick","updateHash","ordered","className","defaultProps","updateHashAuto","declarative"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Mnavbar.css';\n\nexport class MarkdownNavbar extends Component {\n    static defaultProps = {\n        source: '',\n        ordered: false,\n        headingTopOffset: 0,\n        updateHashAuto: true,\n        declarative: false,\n        className: '',\n        onNavItemClick: () => {},\n        onHashChange: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentListNo: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.addTargetTimeout) {\n            clearTimeout(this.addTargetTimeout);\n        }\n            this.addTargetTimeout = setTimeout(() => {\n            this.initHeadingsId();\n            document.addEventListener('scroll', this.winScroll, false);\n            window.addEventListener('hashchange', this.winHashChange, false);\n        }, 500);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.source !== this.props.source) {\n            if (this.scrollEventLockTimer) {\n                clearTimeout(this.scrollEventLockTimer);\n            }\n            this.scrollEventLock = true;\n\n            window.scrollTo(0, 0);\n            // window.history.replaceState(\n            //     {},\n            //     '',\n            //     `${window.location.pathname}${window.location.search}`\n            // );\n            this.setState({\n                currentListNo: '',\n            });\n\n            const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n            Array.prototype.slice.apply(headings).forEach(h => (h.dataset.id = ''));\n\n            this.scrollEventLockTimer = setTimeout(() => {\n                this.initHeadingsId();\n                this.scrollEventLock = false;\n            }, 500);\n        }\n        return true;\n    }\n\n    componentWillUnmount() {\n        if (this.addTargetTimeout) {\n            clearTimeout(this.addTargetTimeout);\n        }\n        if (this.scrollTimeout) {\n            clearTimeout(this.scrollTimeout);\n        }\n        document.removeEventListener('scroll', this.winScroll, false);\n        window.removeEventListener('hashchange', this.winHashChange, false);\n    }\n\n    getNavStructure() {\n        const contentWithoutCode = this.props.source\n        .replace(/^[^#]+\\n/g, '')\n        .replace(/^#\\s[^#\\n]*\\n+/, '')\n        .replace(/```[^`\\n]*\\n+[^```]+```\\n+/g, '')\n        .replace(/`([^`\\n]+)`/g, '$1')\n        .replace(/\\*\\*?([^*\\n]+)\\*\\*?/g, '$1')\n        .replace(/__?([^_\\n]+)__?/g, '$1')\n        .trim();\n\n        const pattOfTitle = /#+\\s([^#\\n]+)\\n*/g;\n        const matchResult = contentWithoutCode.match(pattOfTitle);\n\n        if (!matchResult) {\n        return [];\n        }\n\n        const navData = matchResult.map((r, i) => ({\n        index: i,\n        level: r.match(/^#+/g)[0].length,\n        text: r.replace(pattOfTitle, '$1'),\n        }));\n\n        const levelCount = level => navData.filter(r => r.level === level).length;\n        let startLevel = 1;\n        let startLevelCount = levelCount(startLevel);\n        while (!startLevelCount) {\n        startLevel += 1;\n        startLevelCount = levelCount(startLevel);\n        }\n\n        let listNo = 1;\n        navData.forEach(t => {\n        if (t.level === startLevel) {\n            t.listNo = listNo.toString();\n            listNo += 1;\n        }\n        });\n\n        navData.forEach((t, i) => {\n        if (!t.listNo) {\n            if (navData[i - 1] && t.level === navData[i - 1].level + 1) {\n            t.listNo = `${navData[i - 1].listNo}.1`;\n            } else if (navData[i - 1] && t.level === navData[i - 1].level) {\n            t.listNo = navData[i - 1].listNo.replace(\n                /^(.+\\.)(\\d+)$/g,\n                (w, $1, $2) => `${$1}${parseInt($2, 10) + 1}`\n            );\n            } else {\n            t.listNo = '';\n            }\n        }\n        });\n\n        const result = navData.map(nav => ({\n        ...nav,\n        listNo: nav.listNo.indexOf('.') < 0 ? `${nav.listNo}.` : nav.listNo,\n        text: nav.text,\n        }));\n\n        return result;\n    }\n\n    scrollToTarget(dataId) {\n        if (this.scrollTimeout) {\n        clearTimeout(this.scrollTimeout);\n        }\n\n        this.scrollTimeout = setTimeout(() => {\n        const target = document.querySelector(`[data-id=\"${dataId}\"]`);\n        if (target && typeof target.offsetTop === 'number') {\n            window.scrollTo(0, target.offsetTop - this.props.headingTopOffset);\n        }\n        }, 0);\n    }\n\n    initHeadingsId() {\n        const headingId = decodeURIComponent('');\n\n        this.getNavStructure().forEach(t => {\n        const headings = document.querySelectorAll(`h${t.level}`);\n        const curHeading = Array.prototype.slice\n            .apply(headings)\n            .find(h => h.innerText === t.text && (!h.dataset || !h.dataset.id));\n\n        if (curHeading) {\n            curHeading.dataset.id = `heading-${t.index}`;\n\n            if (headingId && headingId === curHeading.dataset.id) {\n            this.scrollToTarget(headingId);\n            this.setState({\n                currentListNo: t.listNo,\n            });\n            }\n        }\n        });\n    }\n\n    getHeadingList() {\n        const headingList = [];\n\n        this.getNavStructure().forEach(t => {\n        const headings = document.querySelectorAll(`h${t.level}`);\n        const curHeading = Array.prototype.slice\n            .apply(headings)\n            .find(\n            h =>\n                h.innerText === t.text &&\n                !headingList.find(x => x.offsetTop === h.offsetTop)\n            );\n        if (curHeading) {\n            headingList.push({\n            dataId: `heading-${t.index}`,\n            listNo: t.listNo,\n            offsetTop: curHeading.offsetTop,\n            });\n        }\n        });\n\n        return headingList;\n    }\n\n    winScroll = () => {\n        if (this.scrollEventLock) return;\n\n        const scrollTop =\n        window.pageYOffset ||\n        document.documentElement.scrollTop ||\n        document.body.scrollTop ||\n        0;\n\n        const newHeadingList = this.getHeadingList().map(h => ({\n        ...h,\n        distanceToTop: Math.abs(\n            scrollTop + this.props.headingTopOffset - h.offsetTop\n        ),\n        }));\n        const distanceList = newHeadingList.map(h => h.distanceToTop);\n        const minDistance = Math.min(...distanceList);\n        const curHeading = newHeadingList.find(\n        h => h.distanceToTop === minDistance\n        );\n\n        this.setState({\n            currentListNo: curHeading.listNo,\n        });\n    };\n\n    render() {\n        const tBlocks = this.getNavStructure().map(t => {\n            const cls = `title-anchor title-level${t.level} ${\n                this.state.currentListNo === t.listNo ? 'active' : ''\n            }`;\n\n            return (\n                <div\n                className={cls}\n                onClick={evt => {\n                    const currentHash = `heading-${t.index}`;\n\n                    // Avoid execution the callback `onHashChange` when clicking current nav item\n                    if (t.listNo !== this.state.currentListNo) {\n                        // Hash changing callback\n                        this.props.onHashChange(currentHash, this.getCurrentHashValue());\n                    }\n\n                    // Nav item clicking callback\n                    this.props.onNavItemClick(evt, evt.target, currentHash);\n\n                    this.updateHash(currentHash);\n                    this.scrollToTarget(currentHash);\n                    this.setState({\n                        currentListNo: t.listNo,\n                    });\n                }}\n                key={`title_anchor_${t.index}`}>\n                {this.props.ordered ? <small>{t.listNo}</small> : null}\n                {t.text}\n                </div>\n            );\n        });\n\n        return (\n        <div className={`markdown-navigation ${this.props.className}`}>\n            {tBlocks}\n        </div>\n        );\n    }\n}\n\nexport default MarkdownNavbar;\n"]},"metadata":{},"sourceType":"module"}