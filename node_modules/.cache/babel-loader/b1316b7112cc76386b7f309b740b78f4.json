{"ast":null,"code":"var _jsxFileName = \"/Users/christy/Documents/cxxxxxn.github.io/src/views/NoteDetail/Mnavbar.js\";\nimport React, { Component } from 'react';\nimport './Mnavbar.css';\nexport class MarkdownNavbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrentHashValue = () => decodeURIComponent(window.location.hash.replace(/^#/, ''));\n\n    this.winScroll = () => {\n      if (this.scrollEventLock) return;\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      const newHeadingList = this.getHeadingList().map(h => ({ ...h,\n        distanceToTop: Math.abs(scrollTop + this.props.headingTopOffset - h.offsetTop)\n      }));\n      const distanceList = newHeadingList.map(h => h.distanceToTop);\n      const minDistance = Math.min(...distanceList);\n      const curHeading = newHeadingList.find(h => h.distanceToTop === minDistance);\n\n      if (this.props.updateHashAuto) {\n        // Hash changing callback\n        if (curHeading.dataId !== this.getCurrentHashValue()) {\n          this.props.onHashChange(curHeading.dataId, this.getCurrentHashValue());\n        }\n\n        this.updateHash(curHeading.dataId);\n      }\n\n      this.setState({\n        currentListNo: curHeading.listNo\n      });\n    };\n\n    this.winHashChange = () => {\n      this.scrollToTarget(this.getCurrentHashValue());\n    };\n\n    this.state = {\n      currentListNo: ''\n    };\n  }\n\n  componentDidMount() {\n    if (this.addTargetTimeout) {\n      clearTimeout(this.addTargetTimeout);\n    }\n\n    this.addTargetTimeout = setTimeout(() => {\n      this.initHeadingsId();\n      document.addEventListener('scroll', this.winScroll, false);\n      window.addEventListener('hashchange', this.winHashChange, false);\n    }, 500);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (nextProps.source !== this.props.source) {\n      if (this.scrollEventLockTimer) {\n        clearTimeout(this.scrollEventLockTimer);\n      }\n\n      this.scrollEventLock = true;\n      window.scrollTo(0, 0); // window.history.replaceState(\n      //     {},\n      //     '',\n      //     `${window.location.pathname}${window.location.search}`\n      // );\n\n      this.setState({\n        currentListNo: ''\n      });\n      const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n      Array.prototype.slice.apply(headings).forEach(h => h.dataset.id = '');\n      this.scrollEventLockTimer = setTimeout(() => {\n        this.initHeadingsId();\n        this.scrollEventLock = false;\n      }, 500);\n    }\n\n    return true;\n  }\n\n  componentWillUnmount() {\n    if (this.addTargetTimeout) {\n      clearTimeout(this.addTargetTimeout);\n    }\n\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    document.removeEventListener('scroll', this.winScroll, false);\n    window.removeEventListener('hashchange', this.winHashChange, false);\n  }\n\n  getNavStructure() {\n    const contentWithoutCode = this.props.source.replace(/^[^#]+\\n/g, '').replace(/^#\\s[^#\\n]*\\n+/, '').replace(/```[^`\\n]*\\n+[^```]+```\\n+/g, '').replace(/`([^`\\n]+)`/g, '$1').replace(/\\*\\*?([^*\\n]+)\\*\\*?/g, '$1').replace(/__?([^_\\n]+)__?/g, '$1').trim();\n    const pattOfTitle = /#+\\s([^#\\n]+)\\n*/g;\n    const matchResult = contentWithoutCode.match(pattOfTitle);\n\n    if (!matchResult) {\n      return [];\n    }\n\n    const navData = matchResult.map((r, i) => ({\n      index: i,\n      level: r.match(/^#+/g)[0].length,\n      text: r.replace(pattOfTitle, '$1')\n    }));\n\n    const levelCount = level => navData.filter(r => r.level === level).length;\n\n    let startLevel = 1;\n    let startLevelCount = levelCount(startLevel);\n\n    while (!startLevelCount) {\n      startLevel += 1;\n      startLevelCount = levelCount(startLevel);\n    }\n\n    let listNo = 1;\n    navData.forEach(t => {\n      if (t.level === startLevel) {\n        t.listNo = listNo.toString();\n        listNo += 1;\n      }\n    });\n    navData.forEach((t, i) => {\n      if (!t.listNo) {\n        if (navData[i - 1] && t.level === navData[i - 1].level + 1) {\n          t.listNo = `${navData[i - 1].listNo}.1`;\n        } else if (navData[i - 1] && t.level === navData[i - 1].level) {\n          t.listNo = navData[i - 1].listNo.replace(/^(.+\\.)(\\d+)$/g, (w, $1, $2) => `${$1}${parseInt($2, 10) + 1}`);\n        } else {\n          t.listNo = '';\n        }\n      }\n    });\n    const result = navData.map(nav => ({ ...nav,\n      listNo: nav.listNo.indexOf('.') < 0 ? `${nav.listNo}.` : nav.listNo,\n      text: nav.text\n    }));\n    return result;\n  }\n\n  scrollToTarget(dataId) {\n    if (this.scrollTimeout) {\n      clearTimeout(this.scrollTimeout);\n    }\n\n    this.scrollTimeout = setTimeout(() => {\n      const target = document.querySelector(`[data-id=\"${dataId}\"]`);\n\n      if (target && typeof target.offsetTop === 'number') {\n        window.scrollTo(0, target.offsetTop - this.props.headingTopOffset);\n      }\n    }, 0);\n  }\n\n  initHeadingsId() {\n    const headingId = decodeURIComponent(this.props.declarative ? window.location.hash.replace(/^#/, '').trim() : (window.location.hash.match(/heading-\\d+/g) || [])[0]);\n    this.getNavStructure().forEach(t => {\n      const headings = document.querySelectorAll(`h${t.level}`);\n      const curHeading = Array.prototype.slice.apply(headings).find(h => h.innerText === t.text && (!h.dataset || !h.dataset.id));\n\n      if (curHeading) {\n        curHeading.dataset.id = this.props.declarative ? t.text : `heading-${t.index}`;\n\n        if (headingId && headingId === curHeading.dataset.id) {\n          this.scrollToTarget(headingId);\n          this.setState({\n            currentListNo: t.listNo\n          });\n        }\n      }\n    });\n  }\n\n  getHeadingList() {\n    const headingList = [];\n    this.getNavStructure().forEach(t => {\n      const headings = document.querySelectorAll(`h${t.level}`);\n      const curHeading = Array.prototype.slice.apply(headings).find(h => h.innerText === t.text && !headingList.find(x => x.offsetTop === h.offsetTop));\n\n      if (curHeading) {\n        headingList.push({\n          dataId: this.props.declarative ? t.text : `heading-${t.index}`,\n          listNo: t.listNo,\n          offsetTop: curHeading.offsetTop\n        });\n      }\n    });\n    return headingList;\n  }\n\n  updateHash(value) {// window.history.replaceState(\n    // {},\n    // '',\n    // `${window.location.pathname}${window.location.search}#${value}`\n    // );\n  }\n\n  render() {\n    const tBlocks = this.getNavStructure().map(t => {\n      const cls = `title-anchor title-level${t.level} ${this.state.currentListNo === t.listNo ? 'active' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cls,\n        onClick: evt => {\n          const currentHash = this.props.declarative ? t.text : `heading-${t.index}`; // Avoid execution the callback `onHashChange` when clicking current nav item\n\n          if (t.listNo !== this.state.currentListNo) {\n            // Hash changing callback\n            this.props.onHashChange(currentHash, this.getCurrentHashValue());\n          } // Nav item clicking callback\n\n\n          this.props.onNavItemClick(evt, evt.target, currentHash);\n          this.updateHash(currentHash);\n          this.scrollToTarget(currentHash);\n          this.setState({\n            currentListNo: t.listNo\n          });\n        },\n        key: `title_anchor_${t.index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 17\n        }\n      }, this.props.ordered ? /*#__PURE__*/React.createElement(\"small\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 39\n        }\n      }, t.listNo) : null, t.text);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `markdown-navigation ${this.props.className}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }\n    }, tBlocks);\n  }\n\n}\nMarkdownNavbar.defaultProps = {\n  source: '',\n  ordered: false,\n  headingTopOffset: 0,\n  updateHashAuto: true,\n  declarative: false,\n  className: '',\n  onNavItemClick: () => {},\n  onHashChange: () => {}\n};\nexport default MarkdownNavbar;","map":{"version":3,"sources":["/Users/christy/Documents/cxxxxxn.github.io/src/views/NoteDetail/Mnavbar.js"],"names":["React","Component","MarkdownNavbar","constructor","props","getCurrentHashValue","decodeURIComponent","window","location","hash","replace","winScroll","scrollEventLock","scrollTop","pageYOffset","document","documentElement","body","newHeadingList","getHeadingList","map","h","distanceToTop","Math","abs","headingTopOffset","offsetTop","distanceList","minDistance","min","curHeading","find","updateHashAuto","dataId","onHashChange","updateHash","setState","currentListNo","listNo","winHashChange","scrollToTarget","state","componentDidMount","addTargetTimeout","clearTimeout","setTimeout","initHeadingsId","addEventListener","shouldComponentUpdate","nextProps","source","scrollEventLockTimer","scrollTo","headings","querySelectorAll","Array","prototype","slice","apply","forEach","dataset","id","componentWillUnmount","scrollTimeout","removeEventListener","getNavStructure","contentWithoutCode","trim","pattOfTitle","matchResult","match","navData","r","i","index","level","length","text","levelCount","filter","startLevel","startLevelCount","t","toString","w","$1","$2","parseInt","result","nav","indexOf","target","querySelector","headingId","declarative","innerText","headingList","x","push","value","render","tBlocks","cls","evt","currentHash","onNavItemClick","ordered","className","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Mnavbar.css';\n\nexport class MarkdownNavbar extends Component {\n    static defaultProps = {\n        source: '',\n        ordered: false,\n        headingTopOffset: 0,\n        updateHashAuto: true,\n        declarative: false,\n        className: '',\n        onNavItemClick: () => {},\n        onHashChange: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentListNo: '',\n        };\n    }\n\n    componentDidMount() {\n        if (this.addTargetTimeout) {\n        clearTimeout(this.addTargetTimeout);\n        }\n        this.addTargetTimeout = setTimeout(() => {\n        this.initHeadingsId();\n        document.addEventListener('scroll', this.winScroll, false);\n        window.addEventListener('hashchange', this.winHashChange, false);\n        }, 500);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.source !== this.props.source) {\n            if (this.scrollEventLockTimer) {\n                clearTimeout(this.scrollEventLockTimer);\n            }\n            this.scrollEventLock = true;\n\n            window.scrollTo(0, 0);\n            // window.history.replaceState(\n            //     {},\n            //     '',\n            //     `${window.location.pathname}${window.location.search}`\n            // );\n            this.setState({\n                currentListNo: '',\n            });\n\n            const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n            Array.prototype.slice.apply(headings).forEach(h => (h.dataset.id = ''));\n\n            this.scrollEventLockTimer = setTimeout(() => {\n                this.initHeadingsId();\n                this.scrollEventLock = false;\n            }, 500);\n        }\n        return true;\n    }\n\n    componentWillUnmount() {\n        if (this.addTargetTimeout) {\n            clearTimeout(this.addTargetTimeout);\n        }\n        if (this.scrollTimeout) {\n            clearTimeout(this.scrollTimeout);\n        }\n        document.removeEventListener('scroll', this.winScroll, false);\n        window.removeEventListener('hashchange', this.winHashChange, false);\n    }\n\n    getNavStructure() {\n        const contentWithoutCode = this.props.source\n        .replace(/^[^#]+\\n/g, '')\n        .replace(/^#\\s[^#\\n]*\\n+/, '')\n        .replace(/```[^`\\n]*\\n+[^```]+```\\n+/g, '')\n        .replace(/`([^`\\n]+)`/g, '$1')\n        .replace(/\\*\\*?([^*\\n]+)\\*\\*?/g, '$1')\n        .replace(/__?([^_\\n]+)__?/g, '$1')\n        .trim();\n\n        const pattOfTitle = /#+\\s([^#\\n]+)\\n*/g;\n        const matchResult = contentWithoutCode.match(pattOfTitle);\n\n        if (!matchResult) {\n        return [];\n        }\n\n        const navData = matchResult.map((r, i) => ({\n        index: i,\n        level: r.match(/^#+/g)[0].length,\n        text: r.replace(pattOfTitle, '$1'),\n        }));\n\n        const levelCount = level => navData.filter(r => r.level === level).length;\n        let startLevel = 1;\n        let startLevelCount = levelCount(startLevel);\n        while (!startLevelCount) {\n        startLevel += 1;\n        startLevelCount = levelCount(startLevel);\n        }\n\n        let listNo = 1;\n        navData.forEach(t => {\n        if (t.level === startLevel) {\n            t.listNo = listNo.toString();\n            listNo += 1;\n        }\n        });\n\n        navData.forEach((t, i) => {\n        if (!t.listNo) {\n            if (navData[i - 1] && t.level === navData[i - 1].level + 1) {\n            t.listNo = `${navData[i - 1].listNo}.1`;\n            } else if (navData[i - 1] && t.level === navData[i - 1].level) {\n            t.listNo = navData[i - 1].listNo.replace(\n                /^(.+\\.)(\\d+)$/g,\n                (w, $1, $2) => `${$1}${parseInt($2, 10) + 1}`\n            );\n            } else {\n            t.listNo = '';\n            }\n        }\n        });\n\n        const result = navData.map(nav => ({\n        ...nav,\n        listNo: nav.listNo.indexOf('.') < 0 ? `${nav.listNo}.` : nav.listNo,\n        text: nav.text,\n        }));\n\n        return result;\n    }\n\n    scrollToTarget(dataId) {\n        if (this.scrollTimeout) {\n        clearTimeout(this.scrollTimeout);\n        }\n\n        this.scrollTimeout = setTimeout(() => {\n        const target = document.querySelector(`[data-id=\"${dataId}\"]`);\n        if (target && typeof target.offsetTop === 'number') {\n            window.scrollTo(0, target.offsetTop - this.props.headingTopOffset);\n        }\n        }, 0);\n    }\n\n    initHeadingsId() {\n        const headingId = decodeURIComponent(\n        this.props.declarative\n            ? window.location.hash.replace(/^#/, '').trim()\n            : (window.location.hash.match(/heading-\\d+/g) || [])[0]\n        );\n\n        this.getNavStructure().forEach(t => {\n        const headings = document.querySelectorAll(`h${t.level}`);\n        const curHeading = Array.prototype.slice\n            .apply(headings)\n            .find(h => h.innerText === t.text && (!h.dataset || !h.dataset.id));\n\n        if (curHeading) {\n            curHeading.dataset.id = this.props.declarative\n            ? t.text\n            : `heading-${t.index}`;\n\n            if (headingId && headingId === curHeading.dataset.id) {\n            this.scrollToTarget(headingId);\n            this.setState({\n                currentListNo: t.listNo,\n            });\n            }\n        }\n        });\n    }\n\n    getHeadingList() {\n        const headingList = [];\n\n        this.getNavStructure().forEach(t => {\n        const headings = document.querySelectorAll(`h${t.level}`);\n        const curHeading = Array.prototype.slice\n            .apply(headings)\n            .find(\n            h =>\n                h.innerText === t.text &&\n                !headingList.find(x => x.offsetTop === h.offsetTop)\n            );\n        if (curHeading) {\n            headingList.push({\n            dataId: this.props.declarative ? t.text : `heading-${t.index}`,\n            listNo: t.listNo,\n            offsetTop: curHeading.offsetTop,\n            });\n        }\n        });\n\n        return headingList;\n    }\n\n    getCurrentHashValue = () =>\n        decodeURIComponent(window.location.hash.replace(/^#/, ''));\n\n    winScroll = () => {\n        if (this.scrollEventLock) return;\n\n        const scrollTop =\n        window.pageYOffset ||\n        document.documentElement.scrollTop ||\n        document.body.scrollTop ||\n        0;\n\n        const newHeadingList = this.getHeadingList().map(h => ({\n        ...h,\n        distanceToTop: Math.abs(\n            scrollTop + this.props.headingTopOffset - h.offsetTop\n        ),\n        }));\n        const distanceList = newHeadingList.map(h => h.distanceToTop);\n        const minDistance = Math.min(...distanceList);\n        const curHeading = newHeadingList.find(\n        h => h.distanceToTop === minDistance\n        );\n\n        if (this.props.updateHashAuto) {\n        // Hash changing callback\n        if (curHeading.dataId !== this.getCurrentHashValue()) {\n            this.props.onHashChange(curHeading.dataId, this.getCurrentHashValue());\n        }\n\n        this.updateHash(curHeading.dataId);\n        }\n        this.setState({\n        currentListNo: curHeading.listNo,\n        });\n    };\n\n    winHashChange = () => {\n        this.scrollToTarget(this.getCurrentHashValue());\n    };\n\n    updateHash(value) {\n        // window.history.replaceState(\n        // {},\n        // '',\n        // `${window.location.pathname}${window.location.search}#${value}`\n        // );\n    }\n\n    render() {\n        const tBlocks = this.getNavStructure().map(t => {\n            const cls = `title-anchor title-level${t.level} ${\n                this.state.currentListNo === t.listNo ? 'active' : ''\n            }`;\n\n            return (\n                <div\n                className={cls}\n                onClick={evt => {\n                    const currentHash = this.props.declarative\n                    ? t.text\n                    : `heading-${t.index}`;\n\n                    // Avoid execution the callback `onHashChange` when clicking current nav item\n                    if (t.listNo !== this.state.currentListNo) {\n                        // Hash changing callback\n                        this.props.onHashChange(currentHash, this.getCurrentHashValue());\n                    }\n\n                    // Nav item clicking callback\n                    this.props.onNavItemClick(evt, evt.target, currentHash);\n\n                    this.updateHash(currentHash);\n                    this.scrollToTarget(currentHash);\n                    this.setState({\n                        currentListNo: t.listNo,\n                    });\n                }}\n                key={`title_anchor_${t.index}`}>\n                {this.props.ordered ? <small>{t.listNo}</small> : null}\n                {t.text}\n                </div>\n            );\n        });\n\n        return (\n        <div className={`markdown-navigation ${this.props.className}`}>\n            {tBlocks}\n        </div>\n        );\n    }\n}\n\nexport default MarkdownNavbar;\n"]},"metadata":{},"sourceType":"module"}